"use strict";(self.webpackChunklaurent_lao_github_io=self.webpackChunklaurent_lao_github_io||[]).push([[8149],{3905:function(t,e,a){a.d(e,{Zo:function(){return p},kt:function(){return c}});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function i(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function l(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?i(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function o(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},i=Object.keys(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(n=0;n<i.length;n++)a=i[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var d=n.createContext({}),m=function(t){var e=n.useContext(d),a=e;return t&&(a="function"==typeof t?t(e):l(l({},e),t)),a},p=function(t){var e=m(t.components);return n.createElement(d.Provider,{value:e},t.children)},g={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},s=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,i=t.originalType,d=t.parentName,p=o(t,["components","mdxType","originalType","parentName"]),s=m(a),c=r,u=s["".concat(d,".").concat(c)]||s[c]||g[c]||i;return a?n.createElement(u,l(l({ref:e},p),{},{components:a})):n.createElement(u,l({ref:e},p))}));function c(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=a.length,l=new Array(i);l[0]=s;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o.mdxType="string"==typeof t?t:r,l[1]=o;for(var m=2;m<i;m++)l[m]=a[m];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}s.displayName="MDXCreateElement"},1899:function(t,e,a){a.r(e),a.d(e,{assets:function(){return p},contentTitle:function(){return d},default:function(){return c},frontMatter:function(){return o},metadata:function(){return m},toc:function(){return g}});var n=a(7462),r=a(3366),i=(a(7294),a(3905)),l=["components"],o={sidebar_position:3},d="Git Commands",m={unversionedId:"git/git-commands",id:"git/git-commands",title:"Git Commands",description:"I forked a popular list of git-commands and added my own notes to serve as a general Git Guide",source:"@site/docs/git/git-commands.md",sourceDirName:"git",slug:"/git/git-commands",permalink:"/docs/git/git-commands",editUrl:"https://github.com/laurent-lao/laurent-lao.github.io/docs/git/git-commands.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Git Basics",permalink:"/docs/git/git-basics"},next:{title:"Advanced Git Guides",permalink:"/docs/git/git-advanced"}},p={},g=[{value:"Getting &amp; Creating Projects",id:"getting--creating-projects",level:2},{value:"Basic Snapshotting",id:"basic-snapshotting",level:2},{value:"Branching &amp; Merging",id:"branching--merging",level:2},{value:"Sharing &amp; Updating Projects",id:"sharing--updating-projects",level:2},{value:"Inspection &amp; Comparison",id:"inspection--comparison",level:2},{value:"Stashing",id:"stashing",level:2}],s={toc:g};function c(t){var e=t.components,a=(0,r.Z)(t,l);return(0,i.kt)("wrapper",(0,n.Z)({},s,a,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"git-commands"},"Git Commands"),(0,i.kt)("p",null,"I forked a ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/joshnh/Git-Commands"},"popular list of git-commands")," and added my own notes to serve as a general Git Guide"),(0,i.kt)("h2",{id:"getting--creating-projects"},"Getting & Creating Projects"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Command"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git init")),(0,i.kt)("td",{parentName:"tr",align:null},"Initialize a local Git repository")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git clone ssh://git@github.com/[username]/[repository-name].git")),(0,i.kt)("td",{parentName:"tr",align:null},"Create a local copy of a remote repository")))),(0,i.kt)("h2",{id:"basic-snapshotting"},"Basic Snapshotting"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Command"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git status")),(0,i.kt)("td",{parentName:"tr",align:null},"Check status (also -s for short, --porcelain for pretty)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git add [file-name.txt]")),(0,i.kt)("td",{parentName:"tr",align:null},"Add a file to the staging area")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git add -A")),(0,i.kt)("td",{parentName:"tr",align:null},"Add all new and changed files to the staging area")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'git commit -m "[commit message]"')),(0,i.kt)("td",{parentName:"tr",align:null},"Commit changes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git rm -r [file-name.txt]")),(0,i.kt)("td",{parentName:"tr",align:null},"Remove a file (or folder)")))),(0,i.kt)("h2",{id:"branching--merging"},"Branching & Merging"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Command"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git branch")),(0,i.kt)("td",{parentName:"tr",align:null},"List branches (the asterisk denotes the current branch)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git branch -a")),(0,i.kt)("td",{parentName:"tr",align:null},"List all branches (local and remote)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git branch [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Create a new branch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git branch -d [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Delete a branch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git push origin --delete [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Delete a remote branch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git checkout -b [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Create a new branch and switch to it")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git checkout -b [branch name] origin/[branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Clone a remote branch and switch to it")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git branch -m [old branch name] [new branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Rename a local branch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git checkout [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Switch to a branch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git checkout -")),(0,i.kt)("td",{parentName:"tr",align:null},"Switch to the branch last checked out")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git checkout -- [file-name.txt]")),(0,i.kt)("td",{parentName:"tr",align:null},"Discard changes to a file")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git merge [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Merge a branch into the active branch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git merge [source branch] [target branch]")),(0,i.kt)("td",{parentName:"tr",align:null},"Merge a branch into a target branch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git stash")),(0,i.kt)("td",{parentName:"tr",align:null},"Stash changes in a dirty working directory ",(0,i.kt)("a",{parentName:"td",href:"#stashing"},"see Stash section"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git stash clear")),(0,i.kt)("td",{parentName:"tr",align:null},"Remove all stashed entries")))),(0,i.kt)("h2",{id:"sharing--updating-projects"},"Sharing & Updating Projects"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Command"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git push origin [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Push a branch to your remote repository")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git push -u origin [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Push changes to remote repository (and remember the branch)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git push")),(0,i.kt)("td",{parentName:"tr",align:null},"Push changes to remote repository (remembered branch)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git push origin --delete [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Delete a remote branch")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git pull")),(0,i.kt)("td",{parentName:"tr",align:null},"Update local repository to the newest commit")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git pull origin [branch name]")),(0,i.kt)("td",{parentName:"tr",align:null},"Pull changes from remote repository")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git remote add origin ssh://git@github.com/[user]/[repo].git")),(0,i.kt)("td",{parentName:"tr",align:null},"Add a remote repository")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git remote set-url origin ssh://git@github.com/[user]/[repo].git")),(0,i.kt)("td",{parentName:"tr",align:null},"Set a repository's origin branch to SSH")))),(0,i.kt)("h2",{id:"inspection--comparison"},"Inspection & Comparison"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Command"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git log")),(0,i.kt)("td",{parentName:"tr",align:null},"View changes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git log --summary")),(0,i.kt)("td",{parentName:"tr",align:null},"View changes (detailed)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git log --oneline")),(0,i.kt)("td",{parentName:"tr",align:null},"View changes (briefly)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git diff [source branch] [target branch]")),(0,i.kt)("td",{parentName:"tr",align:null},"Preview changes before merging")))),(0,i.kt)("h2",{id:"stashing"},"Stashing"),(0,i.kt)("p",null,"Git only stashes staged and tracked files by default."),(0,i.kt)("p",null,"Use ",(0,i.kt)("inlineCode",{parentName:"p"},"git stash -u")," to also stash untracked files.\nUse ",(0,i.kt)("inlineCode",{parentName:"p"},"git stash -a")," to also stash ignored files."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Command"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git stash pop")),(0,i.kt)("td",{parentName:"tr",align:null},"Reapply saved stash (can use stash@{id} for specific stashes and delete the stash")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git stash apply")),(0,i.kt)("td",{parentName:"tr",align:null},"Reapply saved stash and keep it stashed")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git stash list")),(0,i.kt)("td",{parentName:"tr",align:null},"List all saved stashes")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"git stash show")," ",(0,i.kt)("inlineCode",{parentName:"td"},"-p")),(0,i.kt)("td",{parentName:"tr",align:null},"List changes between current and stash with ",(0,i.kt)("inlineCode",{parentName:"td"},"-p")," for full diff")))),(0,i.kt)("p",null,"More information can be found ",(0,i.kt)("a",{parentName:"p",href:"https://www.atlassian.com/git/tutorials/saving-changes/git-stash"},"here")))}c.isMDXComponent=!0}}]);